// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected 
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {
// Implementation missing.]
    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags	
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:

    //xfinal is x after being zeroed and negated if flags are set
    Mux16(sel=zx, a=x, b[0..15]=false, out=xtemp);
    Not16(in=xtemp, out=notxtemp);
    Mux16(sel=nx, a=xtemp, b=notxtemp, out=xfinal);

    //yfinal is y after being zeroes and negated if flags are set
    Mux16(sel=zy, a=y, b[0..15]=false, out=ytemp);
    Not16(in=ytemp, out=notytemp);
    Mux16(sel=ny, a=ytemp, b=notytemp, out=yfinal);

    And16(a=xfinal, b=yfinal, out=andxy);
    Add16(a=xfinal, b=yfinal, out=addxy);
    
    //choose opperation
    Mux16(sel=f, a=andxy, b=addxy, out=result);
    
    //do not if needed
    Not16(in=result, out=notresult);
    Mux16(sel=no, a=result, b=notresult, out=tempout, out=out, out[15]=ng);
    

    //compute zr
    Or16Way(in=tempout, out=notzr);
    Not(in=notzr, out=zr);
}
