// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //determine instructiontype
    DMux(sel=instruction[15], in=true, a=aInstruction, b=cInstruction);


    //Do ALU computation
    //choose A or M
    Mux16(sel=instruction[12], a=outA, b=inM, out=yALU);
    //actually compute with ALU
    ALU(x=outD, y=yALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU);
    
    //compute jump conditions
    Or16Way(in=outALU, out=NE);
    Not(in=NE, out=EQ);
    FirstBit16(in=outALU, out=LT);
    Not(in=LT, out=GE);
    And(a=NE, b=GE, out=GT);
    Not(in=GT, out=LE);

    //compute whether to jump
    Mux8Way(sel=instruction[0..2], a=false, b=GT, c=EQ, d=GE, e=LT, f=NE, g=LE, h=true, out=jump);
    //only actually do the jump if it's a C instruction
    And(a=cInstruction, b=jump, out=doJump);    
    Not(in=doJump, out=doInc);

    //decide whether to load registers
    And(a=instruction[3], b=cInstruction, out=writeM, out=tWriteM);
    And(a=instruction[4], b=cInstruction, out=loadD);
    And(a=instruction[5], b=cInstruction, out=cLoadA);

    //write to memory if need be
    Mux16(sel=tWriteM, a=inM, b=outALU, out=outM);

    //Detrmine what to load A with
    Mux16(sel=cInstruction, a=instruction, b=outALU, out=inA);
    Or(a=aInstruction, b=cLoadA, out=loadA);

    //registers
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
    DRegister(in=outALU, load=loadD, out=outD);
    
    
    PC(in=outA, load=doJump, inc=doInc, reset=reset, out[0..14]=pc);
    
}